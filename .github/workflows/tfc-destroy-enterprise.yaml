on:
  workflow_call:
    inputs:
      environment_name:
        description: The Github environment containing all the variables needed
        required: false
        type: string
        default: ''
      tfc_organization:
        description: Name of the TFC organization you're deploying to
        required: false
        type: string
      tfc_workspace:
        description: Name of the TFC workspace we're using
        required: false
        type: string
      tfc_approvers:
        description: CSV of people allowed to approve this plan. Will pause the workflow for plan approval if provided
        required: false
        type: string
        default: ''
      working_directory:
        description: Name of the folder containing the terraform files to deploy/destroy
        required: false
        type: string
        default: ./examples/test_app
      retention-days:
        description: How long to store artifacts
        required: false
        type: number
        default: 2
      approval_timeout:
        description: How long the approval step will wait before timeing out
        required: false
        type: number
        default: 360
      destroy_targets:
        description: "Terraform resources to target for destroy"
        required: false
        type: string
        default: ''
    secrets:
      tfc_api_token:
        description: Token used to talk to Terraform Cloud
        required: false
      tfc_planner_api_token:
        description: Token used to talk to Terraform Cloud for plans
        required: true

jobs:
  tf-init:
    runs-on: ubuntu-latest
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.0
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Create folder for init files
        run: mkdir -p ${{ inputs.working_directory || vars.working_directory }}
      - name: Add backend.tf
        working-directory: ${{ inputs.working_directory || vars.working_directory }}
        run: |
          echo "terraform {
            cloud {
              organization = \"${{ inputs.tfc_organization || vars.tfc_organization }}\"
            }
          }" > backend.tf
      - name: init
        working-directory: ${{ inputs.working_directory || vars.working_directory }}
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform init
      - name: Upload Terraform files and build
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform-full-${{ inputs.environment_name }}
          path: |
            **/*.tf
            **/*.terraform
            **/*.terraform.lock.hcl
          retention-days: ${{ inputs.retention-days || vars.retention-days }}

  tf-target-destroy:
    needs: tf-init
    if: inputs.destroy_targets != '' || vars.destroy_targets != ''
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        destroy_targets: ${{ fromJSON(inputs.destroy_targets || vars.destroy_targets)}}
    steps:
      - name: Target destroy resources
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform destroy --target '${{ matrix.destroy_targets }}' --auto-approve
          
  tf-destroy:
    needs: tf-target-destroy
    if: ${{ !cancelled()  && needs.tf-target-destroy.result != 'failed' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.0
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full-${{ inputs.environment_name }}
      - name: destroy
        working-directory: ${{ inputs.working_directory || vars.working_directory }}
        run: |
          TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform destroy -auto-approve
