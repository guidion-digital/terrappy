# This is version of the workflow is nearly the same as 'tfc-deploy.yaml', save
# for the fact that it relies on an enterprise feature which allows us to protect
# the environment (containing the Terraform Cloud token).
#
# Can be run by either accessing a repository environment containing all the
# required variables, or by passing the variables explicitly as inputs:
#
# For environment method:
#
#   - Pass the input 'environment_name', being the name of the environment with
#     the variables
#   - Pass the secrets by setting 'secrets: inherit' on the calling job
#
# For either method, the following must be available either via inputs or the
# environment:
#
# - 'tfc_organization'
# - 'tfc_api_token' (secret),
# - 'tfc_planner_api_token' (secret)
# - 'tfc_workspace'
#
# If 'environment_name' is supplied, it will win for any values found in both
# inputs and that environment
#
# Theoretically, the 'slack_channel' input and the 'slack_token' secret are both
# optional since the 'Notify devs' step should fail gracefully. Their optionality
# has not been tested, however ;)

on:
  workflow_call:
    inputs:
      environment_name:
        description: The Github environment containing all the variables needed
        required: false
        type: string
        default: ''
      tfc_organization:
        description: Name of the TFC organization you're deploying to
        required: false
        type: string
      tfc_workspace:
        description: Name of the TFC workspace we're using
        required: false
        type: string
      tfc_approvers:
        description: CSV of people allowed to approve this plan. Will pause the workflow for plan approval if provided
        required: false
        type: string
        default: ''
      artifact_name:
        description: Name of the workflow artifact containing the build and Terraform files
        required: false
        type: string
        default: build-and-terraform
      source_dir:
        description: Name of the directory holding the source to be deployed
        required: false
        type: string
        default: dist
      retention-days:
        description: How long to store artifacts
        required: false
        type: number
        default: 2
      approval_timeout:
        description: How long the approval step will wait before timeing out
        required: false
        type: number
        default: 360
      slack_channel:
        description: Channel to send approval request messages to
        required: false
        type: string
        default: production-deploys
    secrets:
      slack_token:
        description: Token used to post message to Slack
        required: false
      tfc_api_token:
        description: Token used to talk to Terraform Cloud
        required: false
      tfc_planner_api_token:
        description: Token used to talk to Terraform Cloud for plans
        required: true

jobs:
  tf-init:
    runs-on: ubuntu-latest
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.1
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name || vars.artifact_name }}
      - name: Add backend.tf
        run: |
          echo "terraform {
            cloud {
              organization = \"${{ inputs.tfc_organization || vars.tfc_organization }}\"
            }
          }" > backend.tf
      - name: init
        env:
          TF_IN_AUTOMATION: true
          TF_TOKEN_app_terraform_io: ${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }}
          TF_WORKSPACE: ${{ inputs.tfc_workspace || vars.tfc_workspace }}
          TF_VAR_commit_sha: ${{ github.sha }}
        run: terraform init
      - name: Upload Terraform files and build
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform-full
          path: |
            ${{ inputs.source_dir || vars.source_dir }}
            **/*.tf
            **/*.terraform
            **/*.terraform.lock.hcl
          retention-days: ${{ inputs.retention-days || vars.retention-days }}
          include-hidden-files: true

  check-deployment-policies:
    needs: tf-init
    permissions:
      actions: read
    runs-on: ubuntu-latest
    outputs:
      reviewers: ${{ steps.reviewers.outputs.reviewers }}
    steps:
      - id: reviewers
        run: |
          reviewers=$(curl -s -L -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               "https://api.github.com/repos/$GITHUB_REPOSITORY/environments/${{ inputs.environment_name }}" | jq -r '.protection_rules[] | select(.reviewers != null) | .id')
          echo "reviewers=$reviewers" >> "$GITHUB_OUTPUT"

  tf-plan:
    if: ${{ needs.check-deployment-policies.outputs.reviewers != null }}
    needs: check-deployment-policies
    runs-on: ubuntu-latest
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.1
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: plan
        env:
          TF_IN_AUTOMATION: true
          TF_TOKEN_app_terraform_io: ${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }}
          TF_WORKSPACE: ${{ inputs.tfc_workspace || vars.tfc_workspace }}
          TF_VAR_commit_sha: ${{ github.sha }}
        run: |
            terraform plan
            echo "WARNING: This is a speculative plan. It may not reflect what you see when running terraform apply"
      - name: Notify devs
        run: |
          curl -H "Content-type: application/json" \
            --data '{"channel":"${{ inputs.slack_channel }}","blocks":[{
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "A deploy for ${{ inputs.tfc_workspace }} is waiting in ${{ inputs.environment_name }}"},
                        "accessory": {
                            "type": "button",
                            "text": {
                                "type": "plain_text",
                                "text": "Check out the plan",
                                "emoji": true
                            },
                            "url": "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}",
                            "action_id": "view-plan"
                        }
                      }]
                    }' \
            -H "Authorization: Bearer ${{ secrets.slack_token }}" \
            -X POST https://slack.com/api/chat.postMessage

  tf-apply:
    needs: tf-plan
    runs-on: ubuntu-latest
    outputs:
      tf-apply-result: ${{ needs.tf-apply.result }}
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.1
    if: ${{ !cancelled() }}
    steps:
        # This first step allows us to specify the plan job above in "needs",
        # even if it doesn't run. Done by:
        #   - Setting "if" to "!cancelled()", so that this job always runs (essentially
        #     overriding the "needs"), unless the workflow is cancelled
        #   - Failing this job if the result of the plan job is "failure" or "cancelled"
        # This means that this job will always run (even if the plan job doesn't)
        # but is still affected by a bad result from the plan job when that job does run
      - name: Fail if tf-plan failed
        if: ${{ contains(fromJSON('["failure"], ["cancelled"]'), needs.tf-plan.result) }}
        run: exit 1
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: Run terraform apply with auto-approval
        env:
          TF_IN_AUTOMATION: true
          TF_TOKEN_app_terraform_io: ${{ secrets.tfc_api_token }}
          TF_WORKSPACE: ${{ inputs.tfc_workspace || vars.tfc_workspace  }}
          TF_VAR_commit_sha: ${{ github.sha }}
        run: terraform apply -auto-approve
