on:
  workflow_call:
    inputs:
      environment_name:
        description: The Github environment containing all the variables needed
        required: false
        type: string
        default: ''
      tfc_organization:
        description: Name of the TFC organization you're deploying to
        required: false
        type: string
      tfc_workspace:
        description: Name of the TFC workspace we're using
        required: false
        type: string
      tfc_approvers:
        description: CSV of people allowed to approve this plan. Will pause the workflow for plan approval if provided
        required: false
        type: string
        default: ''
      artifact_name:
        description: Name of the workflow artifact containing the build and Terraform files
        required: false
        type: string
        default: build-and-terraform
      source_dir:
        description: Name of the directory holding the source to be deployed
        required: false
        type: string
        default: examples/**/dist
      retention-days:
        description: How long to store artifacts
        required: false
        type: number
        default: 2
      approval_timeout:
        description: How long the approval step will wait before timeing out
        required: false
        type: number
        default: 360
    secrets:
      tfc_api_token:
        description: Token used to talk to Terraform Cloud
        required: false
      tfc_planner_api_token:
        description: Token used to talk to Terraform Cloud for plans
        required: true

jobs:
  terraform-file-changes:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.terraform-file-changes.outputs.terraform }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: terraform-file-changes
      with:
        filters: |
          terraform:
            - '**/*.tf'
  build:
    needs: terraform-file-changes
    if: ${{ needs.terraform-file-changes.outputs.result == 'true' }}
    concurrency:
      group: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform
          path: |
            **/*.tf
          retention-days: 2

  tf-init:
    needs: build
    runs-on: ubuntu-latest
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.0
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name || vars.artifact_name }}
      - name: Add backend.tf
        run: |
          echo "terraform {
            cloud {
              organization = \"${{ inputs.tfc_organization || vars.tfc_organization }}\"
            }
          }" > backend.tf
      - name: init
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform init
      - name: Upload Terraform files and build
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform-full
          path: |
            **/*.tf
            **/*.hcl
            **/*.terraform
            **/*.terraform.lock.hcl
            ${{ inputs.source_dir || vars.source_dir }}
          retention-days: ${{ inputs.retention-days || vars.retention-days }}

  tf-test:
    needs: tf-init
    runs-on: ubuntu-latest
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.0
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: work-around for permission error
        run: |
          chmod -R a+x .terraform
      - name: test
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.TF_TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_TEST_AWS_SECRET_ACCESS_KEY }}
          TFE_TOKEN: ${{ secrets.tfc_api_token_networking || secrets.tfc_api_token || secrets.tfc_planner_api_token }}
        run: |
          terraform test

  tf-plan:
    needs: tf-init
    runs-on: ubuntu-latest
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.0
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: plan
        run: |
          TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token || secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace }} terraform plan
          echo "WARNING: This is a speculative plan. It may not reflect what you see when running terraform apply"

  # This is needed because skipped tests are marked as succesfull in GitHub required test, we test here if it was succesfully run and then mark it as such, if it's skipped or fails then it's marked as failed.
  completed:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [terraform-file-changes, tf-test , tf-plan]
    outputs:
      deploy-result: ${{ needs.tf-plan.result }}
    steps:
      - id: workflow-or-terraform-change
        if: ${{ (needs.terraform-file-changes.outputs.result == 'false')  || (needs.tf-plan.result  == 'success')  || (needs.tf-test.result  == 'success')}}
        run: exit 0
      - if: failure() || steps.workflow-or-terraform-change.outcome != 'success'
        run: exit 1