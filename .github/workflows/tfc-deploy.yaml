# Can be run by either accessing a repository environment containing all the
# required variables, or by passing the variables explicitly as inputs:
#
# For environment method:
#   - Pass the input 'environment_name', being the name of the environment with
#     the variables
#   - Pass the secrets by setting 'secrets: inherit' on the calling job
#
# For explicit variable input method, 'organization', 'tfc_api_token' (secret),
# 'workspace', are required, whilst 'environment_name' must not be given

on:
  workflow_call:
    inputs:
      environment_name:
        description: The Github environment containing all the variables needed
        required: false
        type: string
        default: ''
      organization:
        description: Name of the TFC organization you're deploying to
        required: false
        type: string
      workspace:
        description: Name of the TFC workspace we're using
        required: false
        type: string
      approvers:
        description: CSV of people allowed to approve this plan. Will pause the workflow for plan approval if provided
        required: false
        type: string
        default: ''
      artifact-name:
        description: Name of the workflow artifact containing the build and Terraform files
        required: false
        type: string
        default: build-and-terraform
      source_dir:
        description: Name of the directory holding the source to be deployed
        required: false
        type: string
        default: dist
      retention-days:
        description: How long to store artifacts
        required: false
        type: number
        default: 2
    secrets:
      tfc_api_token:
        description: Token used to talk to Terraform Cloud
        required: true

jobs:
  cancel:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    steps:
      - name: cancel
        run: tfcd -t ${{ secrets.tfc_api_token }} -w ${{ vars.workspace || vars.workspace || inputs.workspace }} run cancel --auto-approve current

  tf-init:
    needs: cancel
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.artifact || inputs.artifact-name }}
      - name: Add backend.tf
        run: |
          echo "terraform {
            cloud {
              organization = \"${{ vars.organization || inputs.organization }}\"
            }
          }" > backend.tf
      - name: init
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token }} TF_WORKSPACE=${{ vars.workspace || inputs.workspace }} terraform init
      - name: Upload Terraform files and build
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform-full
          path: |
            ${{ vars.source_dir || inputs.source_dir }}
            *.tf
            .terraform
            .terraform.lock.hcl
          retention-days: ${{ vars.retention-days || inputs.retention-days }}

  tf-plan:
    needs: tf-init
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    if: ${{ vars.approvers != null || inputs.approvers != null }}
    permissions:
      issues: write
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: plan
        run: |
          TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token }} TF_WORKSPACE=${{ vars.workspace || inputs.workspace }} terraform plan
          echo "WARNING: This is a speculative plan. It may not reflect what you see when running terraform apply"
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ vars.approvers || inputs.approvers }}

  tf-apply:
    needs: tf-plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    if: always()
    steps:
        # The first step is a bit of a hack. It allows us to have the
        # conditional plan above, whilst still using 'needs' on this job even if
        # that conditional job doesn't run
      - name: Fail if tf-plan failed
        if: ${{ needs.tf-plan.result == 'failure' }}
        run: exit 1
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: Run terraform apply with auto-approval
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token }} TF_WORKSPACE=${{ vars.workspace || inputs.workspace }} terraform apply -auto-approve
