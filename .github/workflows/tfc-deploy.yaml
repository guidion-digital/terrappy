# Can be run by either accessing a repository environment containing all the
# required variables, or by passing the variables explicitly as inputs:
#
# For environment method:
#   - Pass the input 'environment_name', being the name of the environment with
#     the variables
#   - Pass the secrets by setting 'secrets: inherit' on the calling job
#
# For explicit variable input method, 'tfc_organization', 'tfc_api_token' (secret),
# 'tfc_workspace', are required, whilst 'environment_name' must not be given
#
# If 'tfc_approvers' is present in either the environment or as an input, a plan
# job is run and the workflow will pause for approval

on:
  workflow_call:
    inputs:
      environment_name:
        description: The Github environment containing all the variables needed
        required: false
        type: string
        default: ''
      tfc_organization:
        description: Name of the TFC organization you're deploying to
        required: false
        type: string
      tfc_workspace:
        description: Name of the TFC workspace we're using
        required: false
        type: string
      tfc_approvers:
        description: CSV of people allowed to approve this plan. Will pause the workflow for plan approval if provided
        required: false
        type: string
        default: ''
      artifact_name:
        description: Name of the workflow artifact containing the build and Terraform files
        required: false
        type: string
        default: build-and-terraform
      source_dir:
        description: Name of the directory holding the source to be deployed
        required: false
        type: string
        default: dist
      retention-days:
        description: How long to store artifacts
        required: false
        type: number
        default: 2
    secrets:
      tfc_api_token:
        description: Token used to talk to Terraform Cloud
        required: true

jobs:
  cancel:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    steps:
      - name: cancel
        run: tfcd -t ${{ secrets.tfc_api_token }} -w ${{ inputs.tfc_workspace || vars.tfc_workspace }} run cancel --auto-approve current

  tf-init:
    needs: cancel
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name || vars.artifact_name }}
      - name: Add backend.tf
        run: |
          echo "terraform {
            cloud {
              organization = \"${{ inputs.tfc_organization || vars.tfc_organization }}\"
            }
          }" > backend.tf
      - name: init
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform init
      - name: Upload Terraform files and build
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform-full
          path: |
            ${{ inputs.source_dir || vars.source_dir }}
            *.tf
            .terraform
            .terraform.lock.hcl
          retention-days: ${{ inputs.retention-days || vars.retention-days }}

  tf-plan:
    # We can't use if at this level because of this bug in Github Actions:
    # https://github.com/orgs/community/discussions/113313
    # if: ${{ inputs.tfc_approvers != null || vars.tfc_approvers != null }}
    # So we have to add an 'if' to every step
    needs: tf-init
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    permissions:
      issues: write
    steps:
      - if: ${{ inputs.tfc_approvers != null || vars.tfc_approvers != null }}
        name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - if: ${{ inputs.tfc_approvers != null || vars.tfc_approvers != null }}
        name: plan
        run: |
          TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform plan
          echo "WARNING: This is a speculative plan. It may not reflect what you see when running terraform apply"
      - if: ${{ inputs.tfc_approvers != null || vars.tfc_approvers != null }}
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ inputs.tfc_approvers || vars.tfc_approvers }}

  tf-apply:
    needs: tf-plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.0.19
    if: always()
    steps:
        # The first step is a bit of a hack. It allows us to have the
        # conditional plan above, whilst still using 'needs' on this job even if
        # that conditional job doesn't run
      - name: Fail if tf-plan failed
        if: ${{ needs.tf-plan.result == 'failure' }}
        run: exit 1
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: Run terraform apply with auto-approval
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform apply -auto-approve
