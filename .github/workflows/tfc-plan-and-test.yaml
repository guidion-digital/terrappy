# This is version of the workflow is nearly the same as 'tfc-deploy.yaml', save
# for the fact that it relies on an enterprise feature which allows us to protect
# the environment (containing the Terraform Cloud token).
#
# Can be run by passing the variables explicitly as inputs:
#
# For either method, the following must be available either via inputs or the
# environment:
#
# - 'tfc_organization'
# - 'tfc_planner_api_token' (secret)
# - 'tfc_workspace'

on:
  workflow_call:
    inputs:
      environment_name:
        description: The Github environment containing all the variables needed
        required: false
        type: string
        default: ''
      tfc_organization:
        description: Name of the TFC organization you're deploying to
        required: false
        type: string
      tfc_workspace:
        description: Name of the TFC workspace we're using
        required: false
        type: string
      artifact_name:
        description: Name of the workflow artifact containing the build and Terraform files
        required: false
        type: string
        default: build-and-terraform
      source_dir:
        description: Name of the directory holding the source to be deployed
        required: false
        type: string
        default: dist
      retention-days:
        description: How long to store artifacts
        required: false
        type: number
        default: 2
      environment_variable:
        description: Additional arguments
        required: false
        type: string
        default: ''
    secrets:
      tfc_planner_api_token:
        description: Token used to talk to Terraform Cloud for plans
        required: true
    outputs:
      terraform-file-changes-result:
        description: "Output from terraform-file-changes GH Actions"
        value: ${{ jobs.terraform-file-changes.outputs.result }}
      terraform-validate-result:
        description: "Output wether job is is succesful or not"
        value: ${{ jobs.completed.outputs.validate-result }}
      terraform-lint-result:
        description: "Output wether job is is succesful or not"
        value: ${{ jobs.completed.outputs.lint-result }}
      terraform-tf-plan-result:
        description: "Output wether job is is succesful or not"
        value: ${{ jobs.completed.outputs.tf-plan-result }}

jobs:
  terraform-file-changes:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.terraform-file-changes.outputs.terraform }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: terraform-file-changes
      with:
        filters: |
          terraform:
            - '**/*.tf'

  validate:
    needs: terraform-file-changes
    if: ${{ needs.terraform-file-changes.outputs.result == 'true' }}
    secrets: inherit
    uses: ./.github/workflows/tfc-test-validate.yaml
    permissions:
      contents: read
      pull-requests: write

  lint:
    needs: terraform-file-changes
    if: ${{ needs.terraform-file-changes.outputs.result == 'true' }}
    secrets: inherit
    uses: ./.github/workflows/tfc-test-lint.yaml
    permissions:
      contents: read
      pull-requests: write

  tf-init:
    needs: [terraform-file-changes, lint]
    runs-on: ubuntu-latest
    if: ${{ needs.terraform-file-changes.outputs.result == 'true' }}
    permissions:
      contents: read
      pull-requests: write
    env:
      TF_VAR_container_sha: ${{ inputs.environment_variable }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.2
    steps:
      - uses: actions/checkout@v4
      - name: Add backend.tf
        run: |
          echo "terraform {
            cloud {
              organization = \"${{ inputs.tfc_organization || vars.tfc_organization }}\"
            }
          }" > backend.tf
      - name: init
        run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace || vars.tfc_workspace }} terraform init
      - name: Upload Terraform files and build
        uses: actions/upload-artifact@v4
        with:
          name: build-and-terraform-full
          path: |
            ${{ inputs.source_dir || vars.source_dir }}
            **/*.tf
            **/*.terraform
            **/*.terraform.lock.hcl
          retention-days: ${{ inputs.retention-days || vars.retention-days }}
          include-hidden-files: true

  tf-plan:
    needs: [terraform-file-changes, tf-init]
    runs-on: ubuntu-latest
    if: ${{ needs.terraform-file-changes.outputs.result == 'true' }}
    container: ghcr.io/guidionops/terraform-cloud-deployer:0.1.2
    env:
      TF_VAR_container_sha: ${{ inputs.environment_variable }}
    steps:
      - name: Get the build artifacts and Terraform files
        uses: actions/download-artifact@v4
        with:
          name: build-and-terraform-full
      - name: plan
        run: |
          TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=${{ secrets.tfc_planner_api_token }} TF_WORKSPACE=${{ inputs.tfc_workspace }} terraform plan
          echo "WARNING: This is a speculative plan. It may not reflect what you see when running terraform apply"

  # This is needed because skipped tests are marked as succesfull in GitHub required test, we test here if it was succesfully run and then mark it as such, if it's skipped or fails then it's marked as failed.
  completed:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [terraform-file-changes, validate, lint, tf-plan]
    outputs:
      validate-result: ${{ needs.validate.result }}
      lint-result: ${{ needs.lint.result }}
      tf-plan-result:  ${{ needs.tf-plan.result }}
    steps:
      - id: workflow-or-terraform-change
        if: ${{ (needs.terraform-file-changes.outputs.result == 'false')  || (needs.validate.result  == 'success')  && (needs.lint.result  == 'success') && (needs.tf-plan.result  == 'success') }}
        run: exit 0
      - if: failure() || steps.workflow-or-terraform-change.outcome != 'success'
        run: exit 1
